#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Thu Jan 12 14:45:07 2017

Creating GUI

@author: pvkh
"""

import cv2
import sys
from PyQt4 import QtGui
import pyqtgraph as PQtP

class WebcamGui(QtGui.QWidget): # création de la classe héritant de QWidget
    """ Cette classe gère l'interface graphique principale qui affiche l'entrée
    d'une webcam et analyse les composantes RGB ainsi que la luminosité et la
    température. Elle contient des fonctions utilisant la bibliothèque OpenCV.
    """
    
    def __init__(self):
        
        # __init__ du parent
        super(WebcamGui, self).__init__()
        
        self.initWindow()
        
    def initWindow(self):
        
        ## Création de la fenêtre
        # Layout en grille
        grid_layout = QtGui.QGridLayout()
        # Espace entre les widgets
        grid_layout.setSpacing(10)
        
        # Création des boutons
        button_on = QtGui.QPushButton('On', self)
        button_off = QtGui.QPushButton('Off', self)
        button_save = QtGui.QPushButton('Save as picture', self)
        button_start = QtGui.QPushButton('Start stream',self)
        button_stop = QtGui.QPushButton('Stop stream',self)
        
        # Ajout des boutons
        grid_layout.addWidget(button_on, 1, 0, 2, 2)
        grid_layout.addWidget(button_off, 3, 0, 2, 2)
        grid_layout.addWidget(button_save, 5, 0, 1, 1)
        grid_layout.addWidget(button_start, 6, 0, 1, 1)
        grid_layout.addWidget(button_stop,7, 0, 1, 1)
        
        # Ajout du layout sur la fenêtre principale
        self.setLayout(grid_layout)
        
        # Paramètre et affichage de l'interface à l'écran
        self.setGeometry(300, 300, 800, 600) # x, y, W, H; move+resize method
        self.setWindowTitle("Webcam Analyzer") # Titre de la fenêtre  
        
        # Fonctions connectées aux boutons
        button_on.clicked.connect(self.openWebcam)
        button_off.clicked.connect(self.closeWebcam)
        button_start.clicked.connect(self.startStream)
        button_stop.clicked.connect(self.stopStream)
        
        self.show()
        
    def openWebcam(self):
        """ Open webcam through OpenCV.
        """
    
        try:
            if self.webcam.isOpened():
                print "Webcam already ON"
            else:
                self.webcam = cv2.VideoCapture(0)
                print "Webcam connected"
        except AttributeError:
            self.webcam = cv2.VideoCapture(0)
            print "Webcam connected"

    def closeWebcam(self):
        """ Close webcam throught OpenCV.
        """
        try:
            if self.webcam.isOpened():
                self.webcam.release()
                print "Webcam OFF"
            else:
                print "Webcam already off"
        except AttributeError:
            print "Error: Webcam not connected yet"
        
    def startStream(self):
        """
        """
        
        if self.webcam.isOpened(): # if the camera is already opened by OpenCV, get a frame
            rval, frame = self.webcam.read()
            
        while self.play_state:
            rval, frame = self.webcam.read()
            if not self.play_state: # exit on ESC
                print "Stopping stream"
                break
    
    def stopStream(self):
        """
        """
            
gui = WebcamGui()
    
    